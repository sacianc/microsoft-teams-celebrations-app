<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnniversaryEventTypeName" xml:space="preserve">
    <value>Aniversario</value>
  </data>
  <data name="BirthdayEventTypeName" xml:space="preserve">
    <value>Birthday</value>
  </data>
  <data name="EditButtonTitle" xml:space="preserve">
    <value>Edit</value>
    <comment>Title of the button that edits the event</comment>
  </data>
  <data name="EventCardTitle" xml:space="preserve">
    <value>{0} is celebrating {1} with the team.</value>
  </data>
  <data name="EventDoesNotExistMessage" xml:space="preserve">
    <value>Sorry, I couldn't find this event.</value>
  </data>
  <data name="EventPassedMessage" xml:space="preserve">
    <value>The event occurrence has already passed.</value>
  </data>
  <data name="EventPreviewCardHeader" xml:space="preserve">
    <value>{0} is celebrating {1} with the team.</value>
  </data>
  <data name="EventPreviewMessageText" xml:space="preserve">
    <value>Hi {0}, you have an upcoming event in the next 3 days. If you take no action, I will post this celebration.</value>
  </data>
  <data name="EventShareMessage" xml:space="preserve">
    <value>Looks like you joined a new team. Would you like to share your events in {0} as well?</value>
  </data>
  <data name="EventSkippedMessage" xml:space="preserve">
    <value>Ok, I'll skip "{0}" this year and won't share it with your teams.</value>
  </data>
  <data name="GetStartedButtonText" xml:space="preserve">
    <value>Get started</value>
  </data>
  <data name="IgnoreEventShare" xml:space="preserve">
    <value>Ok, if you change your mind you can share the events from the Events tab.</value>
  </data>
  <data name="MultipleEventsMessage" xml:space="preserve">
    <value>Stop the presses! Today {0} and {1}. That's a lot of merrymaking for one day—pace yourselves!</value>
    <comment>Message sent for a card with multiple events. {0} is the list of events except for the last one, {1} is the last event.</comment>
  </data>
  <data name="MultipleEventsSummary" xml:space="preserve">
    <value>We're celebrating multiple events today!</value>
    <comment>Summary text for the message posted when there are multiple events to celebrate.</comment>
  </data>
  <data name="NoThanksButtonTitle" xml:space="preserve">
    <value>No, thanks</value>
  </data>
  <data name="OtherEventTypeName" xml:space="preserve">
    <value>Other</value>
  </data>
  <data name="ShareButtonTitle" xml:space="preserve">
    <value>Share</value>
  </data>
  <data name="ShareWithTeamGenericError" xml:space="preserve">
    <value>Some error occurred while share your events with team. Please try again.</value>
  </data>
  <data name="ShareWithTeamNotAMemberError" xml:space="preserve">
    <value>You are no longer a member of {0}.</value>
    <comment>Error message when we don't find the user in the team roster. {0} is the name of the team.</comment>
  </data>
  <data name="ShareWithTeamsNotInstalledError" xml:space="preserve">
    <value>Someone uninstalled me from {0}, I can no longer share these events there.</value>
    <comment>Error message when we don't find the team in the database. {0} is the name of the team.</comment>
  </data>
  <data name="ShareWithTeamSuccessMessage" xml:space="preserve">
    <value>I’ve set those events to be shared with the team when they occur.</value>
  </data>
  <data name="SingleEventMessage" xml:space="preserve">
    <value>&lt;at&gt;{0}&lt;/at&gt; is celebrating {1}</value>
    <comment>Message sent for an event. {0} is the name of the person celebrating, {1} is the name of the event.</comment>
  </data>
  <data name="SkipButtonTitle" xml:space="preserve">
    <value>Skip</value>
    <comment>Title of the button that skips the event</comment>
  </data>
  <data name="SkippedStaleEventMessage" xml:space="preserve">
    <value>Sorry, the event is either already passed, or has been changed since this card was sent.</value>
    <comment>Message shown when the user acts on an event card that is stale.</comment>
  </data>
  <data name="TakeATourButtonText" xml:space="preserve">
    <value>Take a tour</value>
  </data>
  <data name="TourTaskModuleTitle" xml:space="preserve">
    <value>Tour</value>
    <comment>Title of the tour task module</comment>
  </data>
  <data name="WelcomeMessageForTeam" xml:space="preserve">
    <value>I'm the Celebrations bot. {0} installed me in {1}. I’m here to help everyone celebrate birthdays, anniversaries, and anything else you tell me about.</value>
    <comment>Text of the welcome card sent to the team</comment>
  </data>
  <data name="WelcomeMessageForTeamTitle" xml:space="preserve">
    <value>Hi!</value>
    <comment>Title of the welcome card sent to the team</comment>
  </data>
  <data name="WelcomeMessageForUserTitle" xml:space="preserve">
    <value>Hi!</value>
    <comment>Title of the welcome card sent to a user</comment>
  </data>
  <data name="WelcomeMessagePart1" xml:space="preserve">
    <value>Thanks for installing me. I’m ready to help you celebrate special events with your team. Currently you don’t have me in any of your teams</value>
  </data>
  <data name="WelcomeMessagePart2" xml:space="preserve">
    <value>Click get started to start adding your own events.</value>
  </data>
  <data name="WelcomeMessagePart3" xml:space="preserve">
    <value>Then install me in a team so that I can help you and your team members remember and share their events.</value>
  </data>
  <data name="WelcomeMessagePart4" xml:space="preserve">
    <value>I’m ready to help you celebrate special events with your team. Click get started to add your own events.</value>
  </data>
</root>